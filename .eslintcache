[{"D:\\react-projects\\ab_admin_dashboard\\src\\index.js":"1","D:\\react-projects\\ab_admin_dashboard\\src\\App.js":"2","D:\\react-projects\\ab_admin_dashboard\\src\\serviceWorker.js":"3","D:\\react-projects\\ab_admin_dashboard\\src\\Router.js":"4","D:\\react-projects\\ab_admin_dashboard\\src\\env.js":"5","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Dashboard.js":"6","D:\\react-projects\\ab_admin_dashboard\\src\\views\\PurchaseOrder.js":"7","D:\\react-projects\\ab_admin_dashboard\\src\\views\\SellingOrder.js":"8","D:\\react-projects\\ab_admin_dashboard\\src\\views\\DashboardIndex.js":"9","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Products.js":"10","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Sipments.js":"11","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Stock.js":"12","D:\\react-projects\\ab_admin_dashboard\\src\\store\\configureStore.js":"13","D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\PurchaseOrderForm.js":"14","D:\\react-projects\\ab_admin_dashboard\\src\\components\\OrderToPdf\\OrderToPdf.js":"15","D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\PurchaseOrderList.js":"16","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Dashboard\\listItems.js":"17","D:\\react-projects\\ab_admin_dashboard\\src\\components\\SellingOrder\\SellingOrderForm.js":"18","D:\\react-projects\\ab_admin_dashboard\\src\\components\\SellingOrder\\SellingOrderList.js":"19","D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\PurchaseOrderToolBar.js":"20","D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Chart.js":"21","D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Deposits.js":"22","D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Orders.js":"23","D:\\react-projects\\ab_admin_dashboard\\src\\store\\rootReducer.js":"24","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\ShipmentForm.js":"25","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\ShipmentList.js":"26","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\AddButtonCircle.js":"27","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Products\\ProductsList.js":"28","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Drawer\\Drawer.js":"29","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Products\\EditProductForm.js":"30","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\SuggestionInput.js":"31","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\SelectList.js":"32","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\TextInput.js":"33","D:\\react-projects\\ab_admin_dashboard\\src\\store\\middleware\\api.js":"34","D:\\react-projects\\ab_admin_dashboard\\src\\store\\PurchaseOrderReducer\\PurchaseOrderReducer.js":"35","D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\Test.js":"36","D:\\react-projects\\ab_admin_dashboard\\src\\store\\SellingOrderReducer\\SellingOrderReducer.js":"37","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\AddProductToShipmentForm.js":"38","D:\\react-projects\\ab_admin_dashboard\\src\\components\\TextEditor\\DraftTextEditor.js":"39","D:\\react-projects\\ab_admin_dashboard\\src\\components\\TextEditor\\TextEditor.js":"40","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Modal\\Modal.js":"41","D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Title.js":"42","D:\\react-projects\\ab_admin_dashboard\\src\\store\\api.jsx":"43","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\ProductByShipmentList.js":"44","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Login.js":"45"},{"size":503,"mtime":499162500000,"results":"46","hashOfConfig":"47"},{"size":1412,"mtime":1643048376003,"results":"48","hashOfConfig":"47"},{"size":5086,"mtime":499162500000,"results":"49","hashOfConfig":"47"},{"size":1455,"mtime":1607542889596,"results":"50","hashOfConfig":"47"},{"size":258,"mtime":1643040568114,"results":"51","hashOfConfig":"47"},{"size":6697,"mtime":1643060916661,"results":"52","hashOfConfig":"47"},{"size":1472,"mtime":1605555029503,"results":"53","hashOfConfig":"47"},{"size":1259,"mtime":1605555150593,"results":"54","hashOfConfig":"47"},{"size":2392,"mtime":1594935915309,"results":"55","hashOfConfig":"47"},{"size":1695,"mtime":1611102049084,"results":"56","hashOfConfig":"47"},{"size":1706,"mtime":1643206463274,"results":"57","hashOfConfig":"47"},{"size":150,"mtime":1613136673188,"results":"58","hashOfConfig":"47"},{"size":321,"mtime":1634373115174,"results":"59","hashOfConfig":"47"},{"size":16706,"mtime":1643058867075,"results":"60","hashOfConfig":"47"},{"size":13077,"mtime":1617636731136,"results":"61","hashOfConfig":"47"},{"size":4272,"mtime":1643041049497,"results":"62","hashOfConfig":"47"},{"size":3180,"mtime":1643061419576,"results":"63","hashOfConfig":"47"},{"size":7120,"mtime":1608282327818,"results":"64","hashOfConfig":"47"},{"size":3132,"mtime":1608282652883,"results":"65","hashOfConfig":"47"},{"size":2546,"mtime":1605554688859,"results":"66","hashOfConfig":"47"},{"size":1481,"mtime":1594935267271,"results":"67","hashOfConfig":"47"},{"size":880,"mtime":1594935931380,"results":"68","hashOfConfig":"47"},{"size":2417,"mtime":1594935850271,"results":"69","hashOfConfig":"47"},{"size":265,"mtime":1597712109399,"results":"70","hashOfConfig":"47"},{"size":7877,"mtime":1612563563822,"results":"71","hashOfConfig":"47"},{"size":3821,"mtime":1611999102364,"results":"72","hashOfConfig":"47"},{"size":857,"mtime":1610630805938,"results":"73","hashOfConfig":"47"},{"size":4182,"mtime":1643049020358,"results":"74","hashOfConfig":"47"},{"size":604,"mtime":1612434320879,"results":"75","hashOfConfig":"47"},{"size":12505,"mtime":1643051475552,"results":"76","hashOfConfig":"47"},{"size":1416,"mtime":1620040078767,"results":"77","hashOfConfig":"47"},{"size":1368,"mtime":1606296445114,"results":"78","hashOfConfig":"47"},{"size":476,"mtime":1605554806989,"results":"79","hashOfConfig":"47"},{"size":1224,"mtime":1634370747101,"results":"80","hashOfConfig":"47"},{"size":6007,"mtime":1605563617041,"results":"81","hashOfConfig":"47"},{"size":173,"mtime":1607546060559,"results":"82","hashOfConfig":"47"},{"size":3282,"mtime":1634378061287,"results":"83","hashOfConfig":"47"},{"size":6351,"mtime":1617603084059,"results":"84","hashOfConfig":"47"},{"size":556,"mtime":1614456094465,"results":"85","hashOfConfig":"47"},{"size":675,"mtime":1614456094466,"results":"86","hashOfConfig":"47"},{"size":1250,"mtime":1612345928023,"results":"87","hashOfConfig":"47"},{"size":356,"mtime":1594935704501,"results":"88","hashOfConfig":"47"},{"size":236,"mtime":1594916133296,"results":"89","hashOfConfig":"47"},{"size":4733,"mtime":1612434306997,"results":"90","hashOfConfig":"47"},{"size":3981,"mtime":1643061332193,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1i5cmrx",{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"94"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"94"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"94"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"94"},"D:\\react-projects\\ab_admin_dashboard\\src\\index.js",[],["204","205"],"D:\\react-projects\\ab_admin_dashboard\\src\\App.js",["206"],"import React from 'react';\nimport './App.css';\nimport Router from './Router'\nimport Index from './views/Dashboard'\nimport env from './env'\nimport axios from \"axios\";\n\n\naxios.defaults.baseURL = env();\naxios.defaults.withCredentials = true;\naxios.defaults.credentials = true;\n\n\n\naxios.interceptors.request.use(\n  (request) => {\n    return request;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    // Edit response config\n    return response;\n  },\n  (error) => {\n    const originalRequest = error.config;\n\n    if (\n      error.response &&\n      error.response.data &&\n      error.response.data.error\n    ) {\n      console.error(\"Api error: \"+error.response.data.Explination)\n    }\n\n    if (error.response.status === 400 && originalRequest.url === 'ab/token') {\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && !originalRequest._retry && originalRequest.url !== 'ab/token') {\n      \n      originalRequest._retry = true;\n      return axios\n        .post('ab/token', {\n          grantType: 'refresh_token',\n        })\n        .then((res) => {\n          if(!res){\n            return;\n          }\n          originalRequest.headers['Authorization'] = res.data.token;\n          return axios(originalRequest);\n        });\n    }\n  }\n);\n\nfunction App() {\n  return (\n    <>\n    <Index />\n    </>\n  );\n}\n\nexport default App;","D:\\react-projects\\ab_admin_dashboard\\src\\serviceWorker.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\Router.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\env.js",["207","208"],"\r\nconst env = () => {\r\n    if (process.env.NODE_ENV == 'development') {\r\n        return 'https://yaz-fr.com/api.yaz-fr.com/'\r\n    }\r\n\r\n    if (process.env.NODE_ENV == 'production') {\r\n        return 'https://api.yaz-fr.com/'\r\n    }\r\n}\r\n\r\nexport default env\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Dashboard.js",["209"],"import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport {\r\n  MainListItems,\r\n  SecondaryListItems,\r\n} from \"../components/Dashboard/listItems\";\r\nimport PurchaseOrderList from \"../components/PurchaseOrder/PurchaseOrderList\";\r\nimport PurchaseOrderForm from \"../components/PurchaseOrder/PurchaseOrderForm\";\r\nimport SellingOrderList from \"../components/SellingOrder/SellingOrderList\";\r\nimport OrderToPdf from \"../components/OrderToPdf/OrderToPdf\";\r\nimport SellingOrderForm from \"../components/SellingOrder/SellingOrderForm\";\r\nimport Products from \"../views/Products\";\r\nimport Shipment from \"../views/Sipments\";\r\nimport Stock from \"../views/Stock\";\r\nimport Login from \"../views/Login\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nexport default function Dashboard(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const [currentPage, setCurrentPage] = React.useState(null);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const goToPageHandler = (object) => {\r\n    setCurrentPage(object);\r\n  };\r\n\r\n  var url_string = window.location.href;\r\n  var url = new URL(url_string);\r\n  var c = url.searchParams.get(\"selling-order\");\r\n\r\n  if (c) {\r\n    return <OrderToPdf id={c} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(\r\n              classes.menuButton,\r\n              open && classes.menuButtonHidden\r\n            )}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n            className={classes.title}\r\n          >\r\n            Dashboard\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <MainListItems onLinkClick={goToPageHandler} />\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          <SecondaryListItems onLinkClick={goToPageHandler} />\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        {currentPage && currentPage.page === \"PurchaseOrderList\" ? (\r\n          <PurchaseOrderList onLinkClick={goToPageHandler} />\r\n        ) : currentPage && currentPage.page === \"PurchaseOrderForm\" ? (\r\n          <PurchaseOrderForm\r\n            onLinkClick={goToPageHandler}\r\n            po={currentPage.id}\r\n          />\r\n        ) : currentPage && currentPage.page === \"SellingOrderList\" ? (\r\n          <SellingOrderList onLinkClick={goToPageHandler} />\r\n        ) : currentPage && currentPage.page === \"products\" ? (\r\n          <Products onLinkClick={goToPageHandler} />\r\n        ) : currentPage && currentPage.page === \"shipment\" ? (\r\n          <Shipment onLinkClick={goToPageHandler} />\r\n        ) : currentPage && currentPage.page === \"stock\" ? (\r\n          <Stock onLinkClick={goToPageHandler} />\r\n        ) : currentPage && currentPage.page === \"login\" ? (\r\n          <Login onLinkClick={goToPageHandler} />\r\n        ) : (\r\n          <div>INDEX</div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\views\\PurchaseOrder.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\views\\SellingOrder.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\views\\DashboardIndex.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\views\\Products.js",["210"],"import React from \"react\";\r\nimport ProductsList from \"../components/Products/ProductsList\";\r\nimport AddButtonCircle from \"../components/Form/AddButtonCircle\";\r\nimport Drawer from \"../components/Drawer/Drawer\";\r\nimport EditProductForm from \"../components/Products/EditProductForm\";\r\nimport axios from \"axios\";\r\nimport env from \"../env\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst Products = () => {\r\n  const [showAddProductDialog, setShowAddProductDialog] = React.useState(false);\r\n  const [productToEdit, setProductToEdit] = React.useState(null);\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  const addnewProductHandler = () => {\r\n    setLoading(true)\r\n    setTimeout(() => {\r\n      axios\r\n      .put(env() + \"products\")\r\n      .then((response) => {\r\n        setProductToEdit(response.data.lastInsertedId);\r\n        setShowAddProductDialog(true);\r\n        setLoading(false)\r\n      })\r\n      .catch((error) => {\r\n        alert(\"error\");\r\n        setLoading(false)\r\n      });\r\n    }, 3000);\r\n    \r\n  };\r\n\r\n  const productEditHandler = id => {\r\n    setShowAddProductDialog(true);\r\n    setProductToEdit(id);\r\n  }\r\n\r\n  const closeDrawer = () => {\r\n    setShowAddProductDialog(false)\r\n    setProductToEdit(null)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {showAddProductDialog ? (\r\n        <Drawer closeDrawer={closeDrawer} show={showAddProductDialog}>\r\n          {productToEdit && <EditProductForm productId={productToEdit} />}\r\n        </Drawer>\r\n      ) : null}{\" \"}\r\n      <AddButtonCircle loading={loading} onClick={addnewProductHandler} />\r\n      <ProductsList onEditHandler={productEditHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Sipments.js",["211","212"],"D:\\react-projects\\ab_admin_dashboard\\src\\views\\Stock.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\store\\configureStore.js",["213"],"import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\r\nimport reducer from './rootReducer'\r\nimport api from './middleware/api'\r\n\r\nexport default function () {\r\n    return  configureStore({\r\n        reducer,\r\n        middleware: [\r\n            ...getDefaultMiddleware(),\r\n            api\r\n    ]\r\n    })\r\n}","D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\PurchaseOrderForm.js",["214","215","216","217","218","219","220","221","222","223","224","225"],"import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SuggestionInput from \"../Form/SuggestionInput\";\r\nimport SelectList from \"../Form/SelectList\";\r\n\r\nimport axios from \"axios\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextInput from \"../Form/TextInput\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport PopupState, { bindTrigger, bindMenu } from \"material-ui-popup-state\";\r\nimport env from \"../../env\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  poContainer: {\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  poCreationDate: {\r\n    height: \"100%\",\r\n    backgroundColor: \"#e24443\",\r\n    flexGrow: 1,\r\n    fontSize: \"50px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    lineHeight: \"50px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    flexDirection: \"column\",\r\n    fontFamily: \"'Spartan', sans-serif\",\r\n    width: \"90px\",\r\n    marginRight: \".5em\",\r\n  },\r\n  poId: {\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nconst speedDialuseStyles = makeStyles((theme) => ({\r\n  root: {\r\n    transform: \"translateZ(0px)\",\r\n    flexGrow: 1,\r\n  },\r\n  speedDial: {\r\n    position: \"absolute\",\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst PurchaseOrderForm = (props) => {\r\n\r\n\r\n  const [suppliers, setSuppliers] = React.useState([]);\r\n  const [deliveryTypes, setDeliveryTypes] = React.useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [checkedLines, setCheckedLines] = React.useState([]);\r\n  const [purchaseOrder, setPurchaseOrder] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    axios.get( \"suppliers\").then((response) => {\r\n      const suppliers = response.data;\r\n      setSuppliers(suppliers);\r\n    });\r\n\r\n    axios.get(\"delivery-type\").then((response) => {\r\n      const deliverytypes = response.data;\r\n      setDeliveryTypes(deliverytypes);\r\n    });\r\n\r\n    axios.get(\"purchase-order/\" + props.po).then((response) => {\r\n      setPurchaseOrder(response.data);\r\n    });\r\n  }, [props.po]);\r\n\r\n  const onSuppliersChangeHandler = (supplier) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    purchaseOrderCopy.PurchaseOrder.supplierId = supplier.id;\r\n    purchaseOrderCopy.PurchaseOrder.supplierName = supplier.name;\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const onDeliveryTypesHandler = (deliveryType) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    purchaseOrderCopy.PurchaseOrder.deliveryTypeId = deliveryType.id;\r\n    purchaseOrderCopy.PurchaseOrder.name = deliveryType.name;\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const onCurrencyChangeHandler = (currency) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    purchaseOrderCopy.PurchaseOrder.currencyId = currency.value;\r\n    purchaseOrderCopy.PurchaseOrder.currecny = currency.name;\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const saveOrder = () => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n\r\n    axios.post(\r\n      env() + \"purchase-order/save/\" + purchaseOrderCopy.PurchaseOrder.id,\r\n      {\r\n        purchaseOrder: purchaseOrderCopy.PurchaseOrder,\r\n        ac: \"ThisIsHowIKnowYasir@ab\",\r\n      }\r\n    );\r\n  };\r\n\r\n  const searchCodeBarHandler = (lineIndex) => async (event) => {\r\n    \r\n    const productCodeBar = event.target.value.trim();\r\n    if (!productCodeBar) return;\r\n    const product = await fetchProductByItsCodeBar(productCodeBar);\r\n    const codeBar = product.data.code_bar;\r\n    const id = product.data.id;\r\n\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n\r\n    purchaseOrderCopy.Lines[lineIndex] = {\r\n      ...purchaseOrderCopy.Lines[lineIndex],\r\n      code_bar: codeBar,\r\n      product_id: id,\r\n    };\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const codeBarChangeHandler = (lineIndex) => (event) => {\r\n    const productCodeBar = event.target.value;\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    purchaseOrderCopy.Lines[lineIndex] = {\r\n      ...purchaseOrderCopy.Lines[lineIndex],\r\n      code_bar: productCodeBar,\r\n    };\r\n\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const productCountChangeHandler = (lineIndex) => (event) => {\r\n    const productCount = event.target.value;\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n\r\n    purchaseOrderCopy.Lines[lineIndex] = {\r\n      ...purchaseOrderCopy.Lines[lineIndex],\r\n      product_count: productCount,\r\n    };\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const calculateLineTotalPrice = (lineIndex) => (event) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    const totalPrice =\r\n      purchaseOrderCopy.Lines[lineIndex].product_count *\r\n      purchaseOrderCopy.Lines[lineIndex].unit_price;\r\n    purchaseOrderCopy.Lines[lineIndex] = {\r\n      ...purchaseOrderCopy.Lines[lineIndex],\r\n      total_price: totalPrice,\r\n    }\r\n\r\n\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const productPriceChangeHandler = (lineIndex) => (event) => {\r\n    const productPrice = event.target.value;\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    purchaseOrderCopy.Lines[lineIndex] = {\r\n      ...purchaseOrderCopy.Lines[lineIndex],\r\n      unit_price: productPrice,\r\n    };\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const fetchProductByItsCodeBar = async (codeBar) =>\r\n    await axios.get(`${env()}products/codebar/${codeBar}`);\r\n\r\n  const addEmptyOrderLine = () => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n\r\n    purchaseOrderCopy.Lines = [\r\n      {\r\n        toAdd: true,\r\n        unit_price: \" \",\r\n        code_bar: \" \",\r\n        product_id: \" \",\r\n        product_count: \" \",\r\n        total_price: \" \",\r\n        notSaved: \"\",\r\n      },\r\n    ].concat(purchaseOrderCopy.Lines);\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const handleClose = (action) => {\r\n    if (action.operation === \"addOrderLine\") {\r\n      addEmptyOrderLine();\r\n    }\r\n\r\n    if (action.operation === \"saveOrder\") {\r\n      saveOrder();\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const presisteLine = async (index, event) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    const lineToPresiste = purchaseOrderCopy.Lines[index];\r\n    const response = await axios.post(\r\n      env() + \"purchase-order/\" + props.po + \"/lines/add\",\r\n      {\r\n        ac: \"ThisIsHowIKnowYasir@ab\",\r\n        productStockLine: lineToPresiste,\r\n      }\r\n    );\r\n    if (!response.data.error) {\r\n      axios.get(env() + \"purchase-order/\" + props.po).then((response) => {\r\n        setPurchaseOrder(response.data);\r\n      });\r\n      return;\r\n    }\r\n\r\n    alert(\"Error saving data\");\r\n  };\r\n\r\n  const onLineCheck = (index) => (e) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n\r\n    if (e.target.checked) {\r\n      purchaseOrderCopy.Lines[index].checked = true;\r\n      setPurchaseOrder(purchaseOrderCopy);\r\n      return;\r\n    }\r\n    purchaseOrderCopy.Lines[index].checked = false;\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const clearLineInput = (index) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n\r\n    purchaseOrderCopy.Lines[index] = {\r\n      unit_price: \" \",\r\n      code_bar: \" \",\r\n      product_id: \" \",\r\n      product_count: \" \",\r\n      total_price: \" \",\r\n    };\r\n    setPurchaseOrder(purchaseOrderCopy);\r\n  };\r\n\r\n  const cleanLinesHandler = (popupstate) => {\r\n    const purchaseOrderCopy = { ...purchaseOrder };\r\n    popupstate.close();\r\n    purchaseOrderCopy.Lines.forEach((line, index) => {\r\n      if (line.checked) {\r\n        clearLineInput(index);\r\n      }\r\n    });\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  const speedDialStyle = speedDialuseStyles();\r\n  if (purchaseOrder && !purchaseOrder.PurchaseOrder) {\r\n    return <h3>Error could not fetch orderInfo {`${props.po}`}</h3>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Purchase order {`${props.po}`}</h3>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={\r\n              purchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                ? true\r\n                : false\r\n            }\r\n            label={\"Supplier\"}\r\n            label=\"Supplier\"\r\n            onOptionChange={onSuppliersChangeHandler}\r\n            options={suppliers && suppliers.length ? suppliers : null}\r\n            selectedOptions={\r\n              purchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              suppliers &&\r\n              suppliers.length\r\n                ? suppliers.find(\r\n                    (supplier) =>\r\n                      purchaseOrder.PurchaseOrder.supplierName === supplier.name\r\n                  )\r\n                : null\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={\r\n              purchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                ? true\r\n                : false\r\n            }\r\n            label={\"Supplier\"}\r\n            options={\r\n              deliveryTypes && deliveryTypes.length ? deliveryTypes : null\r\n            }\r\n            onOptionChange={onDeliveryTypesHandler}\r\n            selectedOptions={\r\n              purchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              deliveryTypes &&\r\n              deliveryTypes.length\r\n                ? deliveryTypes.find(\r\n                    (deliveryType) =>\r\n                      purchaseOrder.PurchaseOrder.name === deliveryType.name\r\n                  )\r\n                : null\r\n            }\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={\r\n              purchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                ? true\r\n                : false\r\n            }\r\n            fullWidth\r\n            label=\"Currency\"\r\n            options={[\r\n              { name: \"EURO\", value: 1 },\r\n              { name: \"Dinar\", value: 2 },\r\n            ]}\r\n            onOptionChange={onCurrencyChangeHandler}\r\n            selectedOptions={{\r\n              name: purchaseOrder && purchaseOrder.PurchaseOrder ? purchaseOrder.PurchaseOrder.currecny : null,\r\n              value: purchaseOrder\r\n                ? purchaseOrder.PurchaseOrder.currencyId\r\n                : null,\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <SelectList\r\n            disabled={\r\n              purchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                ? true\r\n                : false\r\n            }\r\n            fullWidth\r\n            label=\"Arrived\"\r\n            // selectedOption = { purchaseOrder && parseInt(purchaseOrder.PurchaseOrder.arrived)}\r\n            // value=\"Arrived ?\"\r\n            options={[\r\n              {\r\n                name: \"Yes\",\r\n                value: 1,\r\n              },\r\n              {\r\n                name: \"No\",\r\n                value: 0,\r\n              },\r\n            ]}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <TextInput\r\n            disabled={\r\n              purchaseOrder &&\r\n              purchaseOrder.PurchaseOrder &&\r\n              purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                ? true\r\n                : false\r\n            }\r\n            fullWidth\r\n            type=\"datetime-local\"\r\n            label=\"Arraved at\"\r\n            defaultValue=\"2017-05-24T10:30\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextInput fullWidth disabled label=\"User\" value=\"ALQAISI yasir\" />\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n      <div>\r\n        Order Total :-{\" \"}\r\n        {purchaseOrder &&\r\n        purchaseOrder.Lines &&\r\n        purchaseOrder.Lines.length\r\n          ? parseInt(\r\n              purchaseOrder.Lines.reduce((a, b) => ({\r\n                total_price:\r\n                  parseFloat(a.total_price) + parseFloat(b.total_price),\r\n              })).total_price\r\n            ).toFixed(2)\r\n          : 0}\r\n      </div>\r\n      <br />\r\n      <br /> <br />\r\n      <PopupState variant=\"popover\" popupId=\"demo-popup-menu\">\r\n        {(popupState) => (\r\n          <React.Fragment>\r\n            <Menu {...bindMenu(popupState)}>\r\n              <MenuItem   onClick={(e) => cleanLinesHandler(popupState)}>\r\n                Clear Lines\r\n              </MenuItem>\r\n              <MenuItem onClick={popupState.close}>Delete lines</MenuItem>\r\n            </Menu>\r\n          </React.Fragment>\r\n        )}\r\n      </PopupState>\r\n      <Button style={{marginRight:'1em', marginLeft:'1em'}} onClick={saveOrder} variant=\"contained\" color=\"primary\">\r\n        Save order info\r\n      </Button>\r\n      <Button onClick={addEmptyOrderLine} variant=\"contained\" color=\"primary\">\r\n        Add line\r\n      </Button>\r\n      <br /> <br /><br /> <br />\r\n      {purchaseOrder\r\n        ? purchaseOrder.Lines.map((line, index) => {\r\n            return (\r\n              <Grid container spacing={3} key={index}>\r\n                <Grid item></Grid>\r\n                <Grid item>\r\n                  <TextInput\r\n                    disabled={\r\n                      purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                        ? \"disabled\"\r\n                        : null\r\n                    }\r\n                    value={line.code_bar}\r\n                    fullWidth\r\n                    label=\"Code bar\"\r\n                    onBlur={searchCodeBarHandler(index)}\r\n                    onChange={codeBarChangeHandler(index)}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <TextInput\r\n                    disabled={\r\n                      purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                        ? \"disabled\"\r\n                        : null\r\n                    }\r\n                    value={line.product_id || \" \"}\r\n                    fullWidth\r\n                    label=\"Product id\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <TextInput\r\n                    disabled={\r\n                      purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                        ? \"disabled\"\r\n                        : null\r\n                    }\r\n                    value={line.product_count}\r\n                    fullWidth\r\n                    label=\"Product count\"\r\n                    onBlur={calculateLineTotalPrice(index)}\r\n                    onChange={productCountChangeHandler(index)}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <TextInput\r\n                    disabled={\r\n                      purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                        ? \"disabled\"\r\n                        : null\r\n                    }\r\n                    value={line.unit_price || \" \"}\r\n                    fullWidth\r\n                    label=\"Price unite\"\r\n                    onBlur={calculateLineTotalPrice(index)}\r\n                    onChange={productPriceChangeHandler(index)}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <TextInput\r\n                    disabled={\r\n                      purchaseOrder.PurchaseOrder.orderState === \"COMPLETE\"\r\n                        ? \"disabled\"\r\n                        : null\r\n                    }\r\n                    value={line.total_price || \" \"}\r\n                    fullWidth\r\n                    label=\"Price total\"\r\n                    InputLabelProps={{ shrink: true }}\r\n                    disabled={true}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  {line.toAdd ? (\r\n                    <Button\r\n                      onClick={(e) => presisteLine(index, e)}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  ) : null}\r\n                </Grid>\r\n              </Grid>\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PurchaseOrderForm;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\OrderToPdf\\OrderToPdf.js",["226","227"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport logo from \"../../logo.svg\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport env from \"../../env\";\r\nconst OrderToPdf = (props) => {\r\n  const [orderInfo, setOrderInfo] = useState([]);\r\n\r\n  const [orderLinesPageOne, setOrderLinesPageOne] = useState([]);\r\n  const [orderLinesPageTwo, setOrderLinesPageTwo] = useState([]);\r\n  const [orderTotal, setOrderTotal] = useState(0);\r\n\r\n  function truncate(str, n) {\r\n    return str.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  useEffect(() => {\r\n    axios.get(env() + \"selling-orders/\" + props.id).then((response) => {\r\n      setOrderInfo(response.data.orderInfo);\r\n      if (response.data.orderLines.length > 11) {\r\n        setOrderLinesPageOne(response.data.orderLines.slice(0, 11));\r\n        setOrderLinesPageTwo(response.data.orderLines.slice(11));\r\n      } else {\r\n        setOrderLinesPageOne(response.data.orderLines);\r\n      }\r\n      let total = 0;\r\n      response.data.orderLines.forEach((line) => {\r\n        total += parseInt(line.one_product_total);\r\n      });\r\n      setOrderTotal(total);\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>\r\n          {orderInfo\r\n            ? orderInfo.first_name +\r\n              \" \" +\r\n              orderInfo.last_name +\r\n              \"- \" +\r\n              orderInfo.id\r\n            : null}\r\n        </title>\r\n      </Helmet>\r\n      <div style={{ margin: \".5em\" }}>\r\n        <div style={{ width: \"130px\", margin: \"0 auto\" }}>\r\n          <img style={{ width: \"130px\" }} src={logo} />\r\n        </div>\r\n        <div\r\n          style={{\r\n            fontFamily: \"Dancing Script cursive\",\r\n            color: \"#ec5598\",\r\n            fontWeight: 550,\r\n            fontSize: \"50px\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          ANGE\r\n        </div>\r\n        <div\r\n          style={{\r\n            fontFamily: \"Dancing\",\r\n            Script: \"cursive\",\r\n            color: \"#ec5598\",\r\n            textAlign: \"center\",\r\n            fontWeight: 600,\r\n            fontSize: \"30px\",\r\n          }}\r\n        >\r\n          BEAUTY\r\n        </div>\r\n        <div style={{ direction: \"rtl\", marginBottom: \".5em\" }} class=\"border\">\r\n          <div style={{ display: \"flex\", margin: \".5em\" }}>\r\n            <div className=\"order-number\" style={{ marginLeft: \".5em\" }}>\r\n              رقم الطلب : {orderInfo ? orderInfo.id : null}\r\n            </div>\r\n            <div className=\"order-number\"></div>\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\", margin: \".5em\" }}>\r\n            <div className=\"order-number\" style={{ marginLeft: \".5em\" }}>\r\n              تاريخ الطلب : {orderInfo ? orderInfo.created_at : null}\r\n            </div>\r\n            <div class=\"order-date\"></div>\r\n          </div>\r\n        </div>\r\n        <div className=\"client-contact-info border\">\r\n          <div style={{ flexGrow: 1, padding: \".3em\", fontSize: \"large\" }}>\r\n            <div style={{ display: \"flex\", margin: \".5em\" }}>\r\n              <div style={{ marginLeft: \".5em\" }}>\r\n                الاسم الكامل:{\" \"}\r\n                {orderInfo\r\n                  ? orderInfo.first_name + \" \" + orderInfo.last_name\r\n                  : null}\r\n              </div>\r\n              <div style={{ flexGrow: \"1\" }}></div>\r\n            </div>\r\n            <div style={{ display: \"flex\", margin: \".5em\" }}>\r\n              <div style={{ marginLeft: \".5em\" }}>\r\n                رقم الهاتف :{\" \"}\r\n                {orderInfo\r\n                  ? orderInfo.telephone + \" , \" + orderInfo.seconde_telephone\r\n                  : null}{\" \"}\r\n              </div>\r\n              <div style={{ flexGrow: 1 }}></div>\r\n            </div>\r\n            <div style={{ display: \"flex\", margin: \".5em\" }}>\r\n              <div style={{ marginLeft: \".5em\" }}>\r\n                العنوان : {orderInfo ? orderInfo.address_line : null}{\" \"}\r\n              </div>\r\n              <div style={{ flexGrow: 1 }}></div>\r\n            </div>\r\n            <div style={{ display: \"flex\", margin: \".5em\" }}>\r\n              <div style={{ marginLeft: \".5em\" }}>\r\n                عنوان ثاني : {orderInfo ? orderInfo.second_address_line : null}{\" \"}\r\n              </div>\r\n              <div style={{ flexGrow: 1 }}></div>\r\n            </div>\r\n            <div style={{ display: \"flex\", margin: \".5em\" }}>\r\n              <div style={{ marginLeft: \".5em\" }}>\r\n                المجموع الكلي للطلب :{\" \"}\r\n                {parseInt(orderTotal).toLocaleString(\"ar-IQ\")} دينار\r\n              </div>\r\n              <div style={{ flexGrow: 1 }}></div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              writingMode: \"vertical-rl\",\r\n              padding: \".5em\",\r\n              fontSize: \"30px\",\r\n            }}\r\n            className=\"border-right\"\r\n          >\r\n            معلومات الزبون\r\n          </div>\r\n        </div>\r\n        <div style={{ display: \"flex\", marginTop: \".5em\" }}>\r\n          {/* <div style={{ flexGrow: 1 }}>\r\n            <div\r\n              style={{\r\n                marginRight: \".5em\",\r\n                textAlign: \"center\",\r\n                padding: \"5px\",\r\n              }}\r\n              className=\"border\"\r\n            >\r\n              السعر الكلي\r\n            </div>\r\n            <div\r\n              style={{ marginRight: \".5em\", textAlign: \"center\" }}\r\n              className=\"border\"\r\n            >\r\n              {orderLinesPageOne && orderLinesPageOne.length\r\n                ? orderLinesPageOne.map((line) => {\r\n                    return (\r\n                      <p>\r\n                        {parseInt(line.one_product_total).toLocaleString(\r\n                          \"ar-IQ\"\r\n                        )}\r\n                      </p>\r\n                    );\r\n                  })\r\n                : null}\r\n            </div> */}\r\n          {/* </div> */}\r\n\r\n          <div style={{ flexGrow: \"1\" }}>\r\n            <div\r\n              style={{ textAlign: \"center\", padding: \"5px\" }}\r\n              className=\"border\"\r\n            >\r\n              العدد * السعر المنتج\r\n            </div>\r\n            <div style={{ textAlign: \"center\" }} className=\"border\">\r\n              {orderLinesPageOne && orderLinesPageOne.length\r\n                ? orderLinesPageOne.map((line) => {\r\n                    return (\r\n                      <p>\r\n                        {parseInt(line.one_product_count).toLocaleString(\r\n                          \"ar-IQ\"\r\n                        )}{\" \"}\r\n                        *{\" \"}\r\n                        {parseInt(line.one_product_price).toLocaleString(\r\n                          \"ar-IQ\"\r\n                        )}{\" \"}\r\n                        ={\" \"}\r\n                        {parseInt(line.one_product_total).toLocaleString(\r\n                          \"ar-IQ\"\r\n                        )}\r\n                      </p>\r\n                    );\r\n                  })\r\n                : null}\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ flexGrow: \"1\" }}>\r\n            <div\r\n              style={{ textAlign: \"center\", padding: \"5px\" }}\r\n              className=\"border\"\r\n            >\r\n              كود بار{\" \"}\r\n            </div>\r\n            <div style={{ textAlign: \"center\" }} className=\"border\">\r\n              {orderLinesPageOne && orderLinesPageOne.length\r\n                ? orderLinesPageOne.map((line) => {\r\n                    return (\r\n                      <p>{line.code_bar ? line.code_bar : \"0000000000000\"}</p>\r\n                    );\r\n                  })\r\n                : null}\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ flexGrow: 5 }}>\r\n            <div\r\n              style={{\r\n                marginLeft: \".5em\",\r\n                textAlign: \"center\",\r\n                padding: \"5px\",\r\n              }}\r\n              className=\"border\"\r\n            >\r\n              الوصف\r\n            </div>\r\n            <div\r\n              style={{ marginLeft: \".5em\", textAlign: \"right\" }}\r\n              className=\"border\"\r\n            >\r\n              {orderLinesPageOne && orderLinesPageOne.length\r\n                ? orderLinesPageOne.map((line) => {\r\n                    return (\r\n                      <p style={{ marginRight: \"5px\", direction: \"rtl\" }}>\r\n                        {line.title\r\n                          ? line.product_id + \":- \" + truncate(line.title, 50)\r\n                          : line.product_id + \":- من غير عنوان\"}{\" \"}\r\n                      </p>\r\n                    );\r\n                  })\r\n                : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {orderLinesPageTwo && orderLinesPageTwo.length ? (\r\n          <p>صفحة رقم 1</p>\r\n        ) : null}\r\n        <br /> <br />\r\n        <br />\r\n        <br />\r\n        {\r\n          //xxxxxx\r\n        }\r\n        {orderLinesPageTwo && orderLinesPageTwo.length ? (\r\n          <div style={{ display: \"flex\", marginTop: \"1.5em\" }}>\r\n            {/* <div style={{ flexGrow: 1 }}>\r\n              <div\r\n                style={{\r\n                  marginRight: \".5em\",\r\n                  textAlign: \"center\",\r\n                  padding: \"5px\",\r\n                }}\r\n                className=\"border\"\r\n              >\r\n                السعر الكلي\r\n              </div>\r\n              <div\r\n                style={{ marginRight: \".5em\", textAlign: \"center\" }}\r\n                className=\"border\"\r\n              >\r\n                {orderLinesPageTwo && orderLinesPageTwo.length\r\n                  ? orderLinesPageTwo.map((line) => {\r\n                      return (\r\n                        <p>\r\n                          {parseInt(line.one_product_total).toLocaleString(\r\n                            \"ar-IQ\"\r\n                          )}\r\n                        </p>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </div>\r\n            </div> */}\r\n            <div style={{ flexGrow: \"1\" }}>\r\n              <div\r\n                style={{ textAlign: \"center\", padding: \"5px\" }}\r\n                className=\"border\"\r\n              >\r\n                العدد * السعر المنتج\r\n              </div>\r\n              <div style={{ textAlign: \"center\" }} className=\"border\">\r\n                {orderLinesPageTwo && orderLinesPageTwo.length\r\n                  ? orderLinesPageTwo.map((line) => {\r\n                      return (\r\n                        <p>\r\n                          {parseInt(line.one_product_count).toLocaleString(\r\n                            \"ar-IQ\"\r\n                          )}{\" \"}\r\n                          *{\" \"}\r\n                          {parseInt(line.one_product_price).toLocaleString(\r\n                            \"ar-IQ\"\r\n                          )}{\" \"}\r\n                          ={\" \"}\r\n                          {parseInt(line.one_product_total).toLocaleString(\r\n                            \"ar-IQ\"\r\n                          )}\r\n                        </p>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ flexGrow: \"1\" }}>\r\n              <div\r\n                style={{ textAlign: \"center\", padding: \"5px\" }}\r\n                className=\"border\"\r\n              >\r\n                كود بار{\" \"}\r\n              </div>\r\n              <div style={{ textAlign: \"center\" }} className=\"border\">\r\n                {orderLinesPageTwo && orderLinesPageTwo.length\r\n                  ? orderLinesPageTwo.map((line) => {\r\n                      return <p>{line.code_bar ? line.code_bar : \" \"}</p>;\r\n                    })\r\n                  : null}\r\n              </div>\r\n            </div>\r\n\r\n            <div style={{ flexGrow: 5 }}>\r\n              <div\r\n                style={{\r\n                  marginLeft: \".5em\",\r\n                  textAlign: \"center\",\r\n                  padding: \"5px\",\r\n                }}\r\n                className=\"border\"\r\n              >\r\n                الوصف\r\n              </div>\r\n              <div\r\n                style={{ marginLeft: \".5em\", textAlign: \"right\" }}\r\n                className=\"border\"\r\n              >\r\n                {orderLinesPageTwo && orderLinesPageTwo.length\r\n                  ? orderLinesPageTwo.map((line) => {\r\n                      return (\r\n                        <p style={{ marginRight: \"5px\", direction: \"rtl\" }}>\r\n                          {line.title\r\n                            ? line.product_id + \":- \" + truncate(line.title, 50)\r\n                            : line.product_id + \":- من غير عنوان\"}{\" \"}\r\n                        </p>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n        {orderLinesPageTwo && orderLinesPageTwo.length ? (\r\n          <p>صفحة رقم 2</p>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderToPdf;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\PurchaseOrderList.js",["228","229","230","231","232","233","234"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getPurchaseOrders,\r\n  loadPurchaseOrders,\r\n} from \"../../store/PurchaseOrderReducer/PurchaseOrderReducer\";\r\nimport moment from \"moment\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { withStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport env from \"../../env\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  poContainer: {\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  poCreationDate: {\r\n    height: \"100%\",\r\n    backgroundColor: \"#e24443\",\r\n    flexGrow: 1,\r\n    fontSize: \"50px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    lineHeight: \"50px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    flexDirection: \"column\",\r\n    fontFamily: \"'Spartan', sans-serif\",\r\n    width: \"90px\",\r\n    marginRight: \".5em\",\r\n  },\r\n  poId: {\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst PurchaseOrderList = (props) => {\r\n  // const dispatch = useDispatch();\r\n  // const purchaseOrders = useSelector(getPurchaseOrders);\r\n  const [PurchaseOrders, setPurchaseOrders] = React.useState([]);\r\n  useEffect(() => {\r\n    axios.get(\"purchase-orders\").then((response) => {\r\n      console.log(response.data);\r\n      setPurchaseOrders(response.data);\r\n    });\r\n  }, []);\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"right\">ID</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Created</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Supplier</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Total</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Action</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {PurchaseOrders\r\n              ? PurchaseOrders.map((row) => (\r\n                  <StyledTableRow key={row.name}>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.id}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.creationDate}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.supplier}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.orderTotalPrice}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      <Button\r\n                        onClick={() =>\r\n                          props.onLinkClick({\r\n                            page: \"PurchaseOrderForm\",\r\n                            id: row.id,\r\n                          })\r\n                        }\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))\r\n              : null}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PurchaseOrderList;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Dashboard\\listItems.js",["235","236"],"import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport Test from '../PurchaseOrder/Test'\r\n\r\nexport const MainListItems = (props) =>{\r\n\r\n    return (\r\n        <div>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText onClick={() => props.onLinkClick('dashboard')} primary=\"dashboard\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <ShoppingCartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText onClick={() => props.onLinkClick({page:'PurchaseOrderList'})} primary=\"Purchases orders\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <PeopleIcon />\r\n            </ListItemIcon>\r\n            <ListItemText onClick={() => props.onLinkClick({page:'SellingOrderList'})} primary=\"Selling orders\" primary=\"Selling orders\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <BarChartIcon />\r\n            </ListItemIcon>\r\n            <ListItemText onClick={() => props.onLinkClick({page:'products'})}  primary=\"Products\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <LayersIcon />\r\n            </ListItemIcon>\r\n            <ListItemText onClick={() => props.onLinkClick({page:'shipment'})}  primary=\"Shipment\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <LayersIcon />\r\n            </ListItemIcon>\r\n            <ListItemText onClick={() => props.onLinkClick({page:'stock'})}  primary=\"Stock\" />\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <LayersIcon />\r\n            </ListItemIcon>\r\n            <ListItemText onClick={() => props.onLinkClick({page:'login'})}  primary=\"Login\" />\r\n          </ListItem>\r\n        </div>\r\n      );\r\n      \r\n\r\n\r\n}\r\n\r\nexport const SecondaryListItems = () => {\r\n    return (\r\n    <div>\r\n      <ListSubheader inset>Saved reports</ListSubheader>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <AssignmentIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Current month\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <AssignmentIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Last quarter\" />\r\n      </ListItem>\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n          <AssignmentIcon />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Year-end sale\" />\r\n      </ListItem>\r\n    </div>\r\n  );\r\n\r\n} \r\n ","D:\\react-projects\\ab_admin_dashboard\\src\\components\\SellingOrder\\SellingOrderForm.js",["237","238"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SuggestionInput from \"../Form/SuggestionInput\";\r\nimport TextInput from \"../Form/TextInput\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport env from '../../env'\r\n\r\nexport default function SellingOrderForm({ id }) {\r\n  const [sellingOrder, setSellingOrder] = useState(null);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(env()+\"index.php?path=selling-orders/\" + id)\r\n      .then((response) => {\r\n        setSellingOrder(response.data);\r\n      });\r\n  }, []);\r\n\r\n  console.log(sellingOrder);\r\n  return (\r\n    <>\r\n      <h2>Selling order number {id}</h2>\r\n      <Grid style={{ padding: \"1em\" }} container spacing={3}>\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={false}\r\n            label={\"Client\"}\r\n            // onOptionChange={onSuppliersChangeHandler}\r\n            // options={suppliers && suppliers.length ? suppliers : null}\r\n            // selectedOptions={\r\n            //   purchaseOrder &&\r\n            //   purchaseOrder.orderInfo[0] &&\r\n            //   purchaseOrder.orderInfo &&\r\n            //   suppliers &&\r\n            //   suppliers.length\r\n            //     ? suppliers.find(\r\n            //         (supplier) =>\r\n            //           purchaseOrder.orderInfo[0].company_name === supplier.name\r\n            //       )\r\n            //     : null\r\n            // }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={false}\r\n            label={\"Selling point\"}\r\n            // onOptionChange={onSuppliersChangeHandler}\r\n            // options={suppliers && suppliers.length ? suppliers : null}\r\n            // selectedOptions={\r\n            //   purchaseOrder &&\r\n            //   purchaseOrder.orderInfo[0] &&\r\n            //   purchaseOrder.orderInfo &&\r\n            //   suppliers &&\r\n            //   suppliers.length\r\n            //     ? suppliers.find(\r\n            //         (supplier) =>\r\n            //           purchaseOrder.orderInfo[0].company_name === supplier.name\r\n            //       )\r\n            //     : null\r\n            // }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={false}\r\n            label={\"Delivery method\"}\r\n            // onOptionChange={onSuppliersChangeHandler}\r\n            // options={suppliers && suppliers.length ? suppliers : null}\r\n            // selectedOptions={\r\n            //   purchaseOrder &&\r\n            //   purchaseOrder.orderInfo[0] &&\r\n            //   purchaseOrder.orderInfo &&\r\n            //   suppliers &&\r\n            //   suppliers.length\r\n            //     ? suppliers.find(\r\n            //         (supplier) =>\r\n            //           purchaseOrder.orderInfo[0].company_name === supplier.name\r\n            //       )\r\n            //     : null\r\n            // }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={false}\r\n            label={\"Pickup point\"}\r\n            // onOptionChange={onSuppliersChangeHandler}\r\n            // options={suppliers && suppliers.length ? suppliers : null}\r\n            // selectedOptions={\r\n            //   purchaseOrder &&\r\n            //   purchaseOrder.orderInfo[0] &&\r\n            //   purchaseOrder.orderInfo &&\r\n            //   suppliers &&\r\n            //   suppliers.length\r\n            //     ? suppliers.find(\r\n            //         (supplier) =>\r\n            //           purchaseOrder.orderInfo[0].company_name === supplier.name\r\n            //       )\r\n            //     : null\r\n            // }\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <SuggestionInput\r\n            disabled={false}\r\n            label={\"Created by\"}\r\n            // onOptionChange={onSuppliersChangeHandler}\r\n            // options={suppliers && suppliers.length ? suppliers : null}\r\n            // selectedOptions={\r\n            //   purchaseOrder &&\r\n            //   purchaseOrder.orderInfo[0] &&\r\n            //   purchaseOrder.orderInfo &&\r\n            //   suppliers &&\r\n            //   suppliers.length\r\n            //     ? suppliers.find(\r\n            //         (supplier) =>\r\n            //           purchaseOrder.orderInfo[0].company_name === supplier.name\r\n            //       )\r\n            //     : null\r\n            // }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <hr />\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item>\r\n          <Checkbox\r\n            checked={false}\r\n            color=\"primary\"\r\n            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n            // onChange={onLineCheck(index)}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <TextInput\r\n            // disabled={\r\n            //   purchaseOrder.orderInfo[0].statu === \"COMPLETE\"\r\n            //     ? \"disabled\"\r\n            //     : null\r\n            // }\r\n            // value={line.code_bar}\r\n            fullWidth\r\n            label=\"Code bar\"\r\n            // onBlur={searchCodeBarHandler(index)}\r\n            // onChange={codeBarChangeHandler(index)}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <TextInput\r\n            // disabled={\r\n            //   purchaseOrder.orderInfo[0].statu === \"COMPLETE\"\r\n            //     ? \"disabled\"\r\n            //     : null\r\n            // }\r\n            // value={line.product_id || \" \"}\r\n            // fullWidth\r\n            label=\"Product id\"\r\n            // InputLabelProps={{ shrink: true }}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <TextInput\r\n            // disabled={\r\n            //   purchaseOrder.orderInfo[0].statu === \"COMPLETE\"\r\n            //     ? \"disabled\"\r\n            //     : null\r\n            // }\r\n            // value={line.product_count}\r\n            // fullWidth\r\n            label=\"Product count\"\r\n            // onBlur={calculateLineTotalPrice(index)}\r\n            // onChange={productCountChangeHandler(index)}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <TextInput\r\n            // disabled={\r\n            //   purchaseOrder.orderInfo[0].statu === \"COMPLETE\"\r\n            //     ? \"disabled\"\r\n            //     : null\r\n            // }\r\n            // value={line.unit_price || \" \"}\r\n            // fullWidth\r\n            label=\"Price unite\"\r\n            // onBlur={calculateLineTotalPrice(index)}\r\n            // onChange={productPriceChangeHandler(index)}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <TextInput\r\n            // disabled={\r\n            //   purchaseOrder.orderInfo[0].statu === \"COMPLETE\"\r\n            //     ? \"disabled\"\r\n            //     : null\r\n            // }\r\n            // value={line.total_price || \" \"}\r\n            // fullWidth\r\n            label=\"Price total\"\r\n            // InputLabelProps={{ shrink: true }}\r\n            // disabled={true}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\SellingOrder\\SellingOrderList.js",["239","240","241","242","243","244","245"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getSellingOrders,\r\n  loadSellingOrders,\r\n} from \"../../store/SellingOrderReducer/SellingOrderReducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport env from '../../env'\r\n\r\nconst orderStateTranslate = {\r\n  NEW:\"طلب جديد\",\r\n  PAIED:\"تم الدفع للموزع\",\r\n  PAID_TO_DISTRIBUTE:\"تم الدفع للموزع\",\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  poContainer: {\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  poCreationDate: {\r\n    height: \"100%\",\r\n    backgroundColor: \"#e24443\",\r\n    flexGrow: 1,\r\n    fontSize: \"50px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    lineHeight: \"50px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    flexDirection: \"column\",\r\n    fontFamily: \"'Spartan', sans-serif\",\r\n    width: \"90px\",\r\n    marginRight: \".5em\",\r\n  },\r\n  poId: {\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nconst SellingOrderList = (props) => {\r\n\r\n\r\n  const [SellingOrders, setSellingOrders] = React.useState([])\r\n\r\n  useEffect(() => {\r\n    axios.get(env()+'selling-orders/').then(response => {\r\n      console.log(response.data)\r\n      setSellingOrders(response.data)\r\n    })\r\n  }, []);\r\n  const classes = useStyles();\r\n  console.log(SellingOrders);\r\n  let total = 0\r\n\r\n  return (\r\n    <>\r\n      {\r\n      SellingOrders && SellingOrders.length ? \r\n      SellingOrders.forEach(order => {\r\n          total += parseInt(order.total_order_price);\r\n      })\r\n      :null\r\n      }\r\n      <div>المجموع الكلي للطلبات: <strong>{parseInt(total).toLocaleString(\"ar-IQ\")}</strong></div>\r\n       <List className={classes.root}>\r\n        {SellingOrders && SellingOrders.length\r\n          ? SellingOrders.map((sellingOrder) => (\r\n              <ListItem key={sellingOrder.id}>\r\n                <ListItemAvatar>\r\n                {sellingOrder.id}\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    sellingOrder.first_name + \" \" + sellingOrder.last_name\r\n                  }\r\n                  secondary={parseInt(sellingOrder.total_order_price).toLocaleString(\"ar-IQ\")  + \" دينار / \" + ' '+ orderStateTranslate[sellingOrder.order_state]}\r\n                />\r\n                <ListItemSecondaryAction>\r\n                <a  href = {'?selling-order=' + sellingOrder.id} target=\"_blank\" >  \r\n                <VisibilityIcon />\r\n                </a>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            ))\r\n          : null}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SellingOrderList;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\PurchaseOrderToolBar.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Chart.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Deposits.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Orders.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\store\\rootReducer.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\ShipmentForm.js",["246","247","248","249","250","251","252"],"import React from \"react\";\r\nimport TextInput from \"../Form/TextInput\";\r\nimport axios from \"axios\";\r\nimport env from \"../../env\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { withStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AddProductToShipmentForm from \"./AddProductToShipmentForm\";\r\nimport Drawer from \"../Drawer/Drawer\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  poContainer: {\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  poCreationDate: {\r\n    height: \"100%\",\r\n    backgroundColor: \"#e24443\",\r\n    flexGrow: 1,\r\n    fontSize: \"50px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    lineHeight: \"50px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    flexDirection: \"column\",\r\n    fontFamily: \"'Spartan', sans-serif\",\r\n    width: \"90px\",\r\n    marginRight: \".5em\",\r\n  },\r\n  poId: {\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst ShipmentForm = (props) => {\r\n  const classes = useStyles();\r\n  const [shipment, setshipment] = React.useState([]);\r\n  const [\r\n    showAddProductToShipmentForm,\r\n    setShowAddProductToShipmentForm,\r\n  ] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    getshipmentDetails().then((response) => {\r\n      setshipment(response.data);\r\n    });\r\n  }, [props.shipmentId]);\r\n\r\n  const getshipmentDetails = () => {\r\n    return axios.get(env() + \"shipments/\" + props.shipmentId);\r\n  };\r\n\r\n  const openAddProductToShippmentHandler = () => {\r\n    setShowAddProductToShipmentForm(true);\r\n  };\r\n\r\n  const closeAddProductToShipmentForm = () => {\r\n    getshipmentDetails().then((response) => {\r\n      setshipment(response.data);\r\n    });\r\n    setShowAddProductToShipmentForm(false);\r\n  };\r\n\r\n  const formDataChange = () => {\r\n    getshipmentDetails().then((response) => {\r\n      setshipment(response.data);\r\n    });\r\n  };\r\n\r\n  const shipmentRecivedHandler = () => {\r\n    let answer;\r\n    answer = window.confirm(\r\n      \"Are you sure you want to mark this shipment as recived ?\"\r\n    );\r\n\r\n    if (!answer) {\r\n      return;\r\n    }\r\n    axios\r\n      .post(env() + \"shipments/confirm/\" + props.shipmentId)\r\n      .then((response) => {\r\n        getshipmentDetails().then((response) => {\r\n          setshipment(response.data);\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        alert(error.response.data.Explination);\r\n      });\r\n  };\r\n\r\n  const shipShipmentHandler = () => {\r\n    let answer;\r\n    answer = window.confirm(\r\n      \"Are you sure you want to ship this shipment\"\r\n    );\r\n\r\n    if (!answer) {\r\n      return;\r\n    }\r\n    axios.post(env()+'shipments/ship/'+props.shipmentId).then(response=>{\r\n      getshipmentDetails().then((response) => {\r\n        setshipment(response.data);\r\n      });\r\n    }).catch(error=>{\r\n      alert(error.response.data.Explination);\r\n    })\r\n  }\r\n\r\n  console.log(shipment);\r\n  return (\r\n    <div style={{ padding: \"3em\" }}>\r\n      <Drawer\r\n        closeDrawer={closeAddProductToShipmentForm}\r\n        show={showAddProductToShipmentForm}\r\n        anchor=\"right\"\r\n      >\r\n        <AddProductToShipmentForm\r\n          sellingPoint={\r\n            shipment &&\r\n            shipment.shipment &&\r\n            shipment.shipment.selling_point_from\r\n          }\r\n          onFormClose={closeAddProductToShipmentForm}\r\n          onFormDataChange={formDataChange}\r\n          shipment={props.shipmentId}\r\n        />\r\n      </Drawer>\r\n      <Button onClick={props.onDrawerCloseHandler}>X</Button>\r\n      <h1>SHIPMENT DETAIL : {props.shipmentId}</h1>\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"From\"\r\n        value={shipment && shipment.shipment && shipment.shipment.from_sp}\r\n        placeholder=\"Codebar\"\r\n        // onChange={codeBarChangeHandler}\r\n      />\r\n      <br />\r\n      <br />\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"To\"\r\n        value={shipment && shipment.shipment && shipment.shipment.to_sp}\r\n        placeholder=\"Local code bar\"\r\n        // onChange={localCodeBarChangeHandler}\r\n      />\r\n      <br />\r\n      <br />\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"Weight\"\r\n        value={shipment && shipment.shipment && shipment.shipment.weight}\r\n        placeholder=\"Weight\"\r\n        // onChange={weightChangeHandler}\r\n      />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <Button\r\n        disabled={\r\n          shipment && shipment.shipment && (shipment.shipment.shipment_state == 3 || shipment.shipment.shipment_state == 2)\r\n        }\r\n        onClick={openAddProductToShippmentHandler}\r\n        variant=\"contained\"\r\n      >\r\n        Add new product to this shipment\r\n      </Button>\r\n\r\n      <Button\r\n        disabled={\r\n          shipment && shipment.shipment && (shipment.shipment.shipment_state == 1 || shipment.shipment.shipment_state == 3)\r\n        }\r\n        onClick={shipmentRecivedHandler}\r\n        variant=\"contained\"\r\n      >\r\n        Recived\r\n      </Button>\r\n\r\n      <Button\r\n        disabled={\r\n          shipment && shipment.shipment && (shipment.shipment.shipment_state == 3 || shipment.shipment.shipment_state == 2)\r\n        }\r\n        onClick={shipShipmentHandler}\r\n        variant=\"contained\"\r\n      >\r\n        Ship\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      {shipment.shipmentLines && !!shipment.shipmentLines.length && (\r\n        <div>Product coint in shipment is: {shipment.shipmentLines.length}</div>\r\n      )}\r\n      <br />\r\n      <br />\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"right\">ID</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Product stock id</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Shipment</StyledTableCell>\r\n              <StyledTableCell align=\"right\">action</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {shipment.shipmentLines && shipment.shipmentLines\r\n              ? shipment.shipmentLines.map((row) => (\r\n                  <StyledTableRow key={row.name}>\r\n                    <StyledTableCell align=\"right\">{row.id}</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.products_stock}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.shipment}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      <Button onClick={() => props.onEditHandler(row.id)}>\r\n                        Edit\r\n                      </Button>\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))\r\n              : null}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShipmentForm;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\ShipmentList.js",["253","254","255","256","257","258"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getPurchaseOrders,\r\n  loadPurchaseOrders,\r\n} from \"../../store/PurchaseOrderReducer/PurchaseOrderReducer\";\r\nimport moment from \"moment\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { withStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport env from \"../../env\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  poContainer: {\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  poCreationDate: {\r\n    height: \"100%\",\r\n    backgroundColor: \"#e24443\",\r\n    flexGrow: 1,\r\n    fontSize: \"50px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    lineHeight: \"50px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    flexDirection: \"column\",\r\n    fontFamily: \"'Spartan', sans-serif\",\r\n    width: \"90px\",\r\n    marginRight: \".5em\",\r\n  },\r\n  poId: {\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst ShipmentList = (props) => {\r\n  const [PurchaseOrders, setPurchaseOrders] = React.useState([]);\r\n  useEffect(() => {\r\n    axios.get(env() + \"shipments\").then((response) => {\r\n      console.log(response.data);\r\n      setPurchaseOrders(response.data);\r\n    });\r\n  }, []);\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"right\">ID</StyledTableCell>\r\n              <StyledTableCell align=\"right\">From</StyledTableCell>\r\n              <StyledTableCell align=\"right\">To</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Action</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {PurchaseOrders\r\n              ? PurchaseOrders.map((row) => (\r\n                  <StyledTableRow key={row.name}>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.id}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.from_sp}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.to_sp}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      <Button\r\n                        onClick={() =>\r\n                          props.onEditHandler(row.id)\r\n                        }\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))\r\n              : null}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShipmentList;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\AddButtonCircle.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\Products\\ProductsList.js",["259","260","261","262","263","264"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getPurchaseOrders,\r\n  loadPurchaseOrders,\r\n} from \"../../store/PurchaseOrderReducer/PurchaseOrderReducer\";\r\nimport moment from \"moment\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { withStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport env from \"../../env\";\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  poContainer: {\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  poCreationDate: {\r\n    height: \"100%\",\r\n    backgroundColor: \"#e24443\",\r\n    flexGrow: 1,\r\n    fontSize: \"50px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    lineHeight: \"50px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    flexDirection: \"column\",\r\n    fontFamily: \"'Spartan', sans-serif\",\r\n    width: \"90px\",\r\n    marginRight: \".5em\",\r\n  },\r\n  poId: {\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\nconst ProductsList = (props) => {\r\n  const [products, setProducts] = React.useState([]);\r\n  useEffect(() => {\r\n    axios.get(env() + \"products\").then((response) => {\r\n      setProducts(response.data.data);\r\n    });\r\n  }, []);\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"right\">ID</StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                Code <bar></bar>\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">Local code bar</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Weight</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Volume</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Action</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {products\r\n              ? products.map((row) => (\r\n                  <StyledTableRow key={row.name}>\r\n                    <StyledTableCell align=\"right\">{row.id}</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.code_bar}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.local_code_bar}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.weight}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {row.volume}\r\n                    </StyledTableCell>\r\n\r\n                    <StyledTableCell align=\"right\">\r\n                      <Button\r\n                        onClick={() =>\r\n                          props.onEditHandler(row.id)\r\n                        }\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))\r\n              : null}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductsList;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Drawer\\Drawer.js",["265","266"],"import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nexport default function DrawerC(props) {\r\n  const [closeDrawer, setcloseDrawer] = React.useState(false)\r\n  const drawercloseHandler = () => {\r\n    props.closeDrawer()\r\n  }\r\n\r\n  return (\r\n    <div style={{width:\"50%\"}}>\r\n        <React.Fragment key={'top'}>\r\n          <Drawer  anchor={props.anchor ? props.anchor : 'top'} open={props.show } onClose={() => {}} >\r\n           {React.cloneElement(props.children, { onDrawerCloseHandler: drawercloseHandler})}\r\n          </Drawer>\r\n        </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Products\\EditProductForm.js",["267","268","269","270"],"import React from \"react\";\r\nimport TextInput from \"../Form/TextInput\";\r\nimport axios from \"axios\";\r\nimport env from \"../../env\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport TextEditor from \"../TextEditor/TextEditor\";\r\nimport DraftTextEditor from \"../TextEditor/DraftTextEditor\";\r\nconst EditProductForm = (props) => {\r\n  const [product, setProduct] = React.useState([]);\r\n  const [images, setImages] = React.useState([]);\r\n  const [\r\n    selectedProductDescriptionToEdit,\r\n    setSelectedProductDescriptionToEdit,\r\n  ] = React.useState(false);\r\n  const [\r\n    openProductDescriptionModal,\r\n    setOpenProductDescriptionModal,\r\n  ] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    getProductDetails().then((response) => {\r\n      console.log(response.data);\r\n      setProduct(response.data);\r\n    });\r\n\r\n    // getImages().then((response) => {\r\n    //   console.log(response.data);\r\n    //   setImages(response.data);\r\n    // });\r\n  }, [props.productId]);\r\n\r\n  const getProductDetails = () => {\r\n    return axios.get(env() + \"products/\" + props.productId);\r\n  };\r\n\r\n  // const getImages = () =>\r\n  //   axios.get(\r\n  //     \"http://yaz-fr.com/ab-online-cdn/images/images.php?productId=\" +\r\n  //       props.productId\r\n  //   );\r\n\r\n  const codeBarChangeHandler = (event) => {\r\n    const productCodeBar = event.target.value;\r\n    const productCopy = { ...product };\r\n    productCopy.product.code_bar = productCodeBar;\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const localCodeBarChangeHandler = (event) => {\r\n    const productLocalCodeBar = event.target.value;\r\n    const productCopy = { ...product };\r\n    productCopy.product.local_code_bar = productLocalCodeBar;\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const weightChangeHandler = (event) => {\r\n    const weight = event.target.value;\r\n    const productCopy = { ...product };\r\n    productCopy.product.weight = weight;\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const volumeChangeHandler = (event) => {\r\n    const volume = event.target.value;\r\n    const productCopy = { ...product };\r\n    productCopy.product.volume = volume;\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const saveProductDetails = () => {\r\n    const productCopy = { ...product };\r\n    const productDetails = productCopy.product;\r\n    console.log(\"productDetails\", productDetails);\r\n    axios.post(env() + \"products\", productDetails).then((response) => {\r\n      alert(\"saved!\")\r\n    });\r\n  };\r\n\r\n  const languageTitleChangeHandler = (index) => (event) => {\r\n    const title = event.target.value;\r\n    const productCopy = { ...product };\r\n    productCopy.titleTranslations[index].title = title;\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const priceChangeHandler = (event) => {\r\n    const price = event.target.value;\r\n    const productCopy = { ...product };\r\n    productCopy.price = price;\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const saveNewPriceHandler = () => {\r\n    const productCopy = { ...product };\r\n    const price = productCopy.price;\r\n    axios\r\n      .post(env() + \"products/\" + props.productId + \"/price\", {\r\n        price,\r\n        productId: props.productId,\r\n      })\r\n      .then((response) => {\r\n        getProductDetails().then((response) => {\r\n          setProduct(response.data);\r\n        });\r\n      });\r\n  };\r\n\r\n  const imagesChangeHandler = (index) => (event) => {\r\n    const image = event.target.value;\r\n    const productCopy = { ...product };\r\n    productCopy.images[index].url = image;\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const saveTranslationHandler = (index) => (event) => {\r\n    const productCopy = { ...product };\r\n    if (productCopy.titleTranslations[index].product === null)\r\n      productCopy.titleTranslations[index].product = props.productId;\r\n    const translation = productCopy.titleTranslations[index];\r\n    axios\r\n      .post(env() + \"translations\", translation)\r\n      .then((response) => {\r\n        getProductDetails().then((response) => {\r\n          setProduct(response.data);\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        alert(error);\r\n      });\r\n  };\r\n\r\n  const addNewProductImageHandler = () => {\r\n    const productCopy = { ...product };\r\n    productCopy.images.push({\r\n      id: null,\r\n      product: props.productId,\r\n      url: null,\r\n      edit: true,\r\n    });\r\n    setProduct(productCopy);\r\n  };\r\n\r\n  const saveImageHandler = (index) => (event) => {\r\n    const productCopy = { ...product };\r\n    const image = productCopy.images[index];\r\n    axios.post(env() + \"images\", image).then((response) => {\r\n      getProductDetails().then((response) => {\r\n        setProduct(response.data);\r\n      });\r\n    });\r\n  };\r\n\r\n  const fileUpload = (e) => {\r\n    const files = Array.from(e.target.files);\r\n\r\n    const formData = new FormData();\r\n\r\n    files.forEach((file, i) => {\r\n      formData.append(i, file);\r\n    });\r\n\r\n    formData.append(\"productId\", props.productId);\r\n\r\n    formData.append(\r\n      \"t\",\r\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFMUUFJU0kgWUFTSVIiLCJpYXQiOjE1MTYyMzkwMjJ9._QzNFrX99dwLQboNZsCGNbFdFFapCFZtSbKXVkWfdG0\"\r\n    );\r\n\r\n    axios\r\n      .post(`http://yaz-fr.com/ab-online-cdn/images/images.php`, formData)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n      });\r\n  };\r\n\r\n  const showProductDescriptionEditor = (index) => (e) => {\r\n    const descriptionsTranslations = [...product.descriptionsTranslations][\r\n      index\r\n    ];\r\n    setSelectedProductDescriptionToEdit(descriptionsTranslations);\r\n    setOpenProductDescriptionModal(true);\r\n  };\r\n\r\n  const onProductDescriptionChange = (content) => {\r\n    const selectedProductDescriptionToEditCopy = {...selectedProductDescriptionToEdit}\r\n    selectedProductDescriptionToEditCopy.description = content\r\n    setSelectedProductDescriptionToEdit(selectedProductDescriptionToEditCopy)\r\n  };\r\n\r\n  const onProductDescriptionCloseHandler = () => {\r\n    setOpenProductDescriptionModal(false);\r\n    saveProductDescription()\r\n  };\r\n\r\n  const saveProductDescription = () => {\r\n    axios\r\n      .post(env() + \"products/descriptions\", {\r\n        id:selectedProductDescriptionToEdit.id,\r\n        language:selectedProductDescriptionToEdit.language,\r\n        product:props.productId,\r\n        description:selectedProductDescriptionToEdit.description\r\n      } )\r\n      .then((response) => {\r\n        getProductDetails().then((response) => {\r\n          setProduct(response.data);\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  return (\r\n    <div style={{ padding: \"3em\" }}>\r\n      <Modal openModal={openProductDescriptionModal}>\r\n        <Button onClick={saveProductDescription}>Save</Button>\r\n        <Button onClick={onProductDescriptionCloseHandler}>Close</Button>\r\n\r\n        <DraftTextEditor\r\n          value={selectedProductDescriptionToEdit.description || \" \"}\r\n          onChange={onProductDescriptionChange}\r\n        />\r\n      </Modal>\r\n      <h1>PRODUCT DETAIL : {props.productId}</h1>\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"Codebar\"\r\n        value={product && product.product && product.product.code_bar}\r\n        placeholder=\"Codebar\"\r\n        onChange={codeBarChangeHandler}\r\n      />\r\n      <br />\r\n      <br />\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"Local code bar\"\r\n        value={product && product.product && product.product.local_code_bar}\r\n        placeholder=\"Local code bar\"\r\n        onChange={localCodeBarChangeHandler}\r\n      />\r\n      <br />\r\n      <br />\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"Weight\"\r\n        value={product && product.product && product.product.weight}\r\n        placeholder=\"Weight\"\r\n        onChange={weightChangeHandler}\r\n      />\r\n      <br />\r\n      <br />\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"Volume\"\r\n        value={product && product.product && product.product.volume}\r\n        placeholder=\"Volume\"\r\n        onChange={volumeChangeHandler}\r\n      />\r\n      <br />\r\n      <br />\r\n      <Button onClick={saveProductDetails} variant=\"contained\" color=\"primary\">\r\n        Save product details\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <hr />\r\n      <h1>TITLE TRANSLATIONS</h1>\r\n      {product.product &&\r\n        product.titleTranslations.map((language, index) => {\r\n          return (\r\n            <>\r\n              <Grid container spacing={3} key={index}>\r\n                <Grid item>\r\n                  {\" \"}\r\n                  <TextInput\r\n                    InputLabelProps={{ shrink: true }}\r\n                    fullWidth\r\n                    label=\"Language\"\r\n                    value={language.name}\r\n                    placeholder=\"Language\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextInput\r\n                    InputLabelProps={{ shrink: true }}\r\n                    fullWidth\r\n                    label=\"Language code\"\r\n                    value={language.code}\r\n                    placeholder=\"Language code\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextInput\r\n                    InputLabelProps={{ shrink: true }}\r\n                    fullWidth\r\n                    label=\"Title\"\r\n                    value={language.title}\r\n                    placeholder=\"Title\"\r\n                    onChange={languageTitleChangeHandler(index)}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button onClick={saveTranslationHandler(index)}>Save</Button>\r\n                </Grid>\r\n              </Grid>\r\n            </>\r\n          );\r\n        })}\r\n      <Button onClick={props.onDrawerCloseHandler}>Close this window</Button>\r\n      <hr />\r\n      <h1>DESCRIPTION TRANSLATIONS</h1>\r\n      {product.product &&\r\n        product.descriptionsTranslations.map((language, index) => {\r\n          return (\r\n            <>\r\n              <Grid container spacing={3} key={index}>\r\n                <Grid item>\r\n                  {\" \"}\r\n                  <TextInput\r\n                    disabled\r\n                    InputLabelProps={{ shrink: true }}\r\n                    fullWidth\r\n                    label=\"Language\"\r\n                    value={language.name}\r\n                    placeholder=\"Language\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextInput\r\n                    disabled\r\n                    InputLabelProps={{ shrink: true }}\r\n                    fullWidth\r\n                    label=\"Language code\"\r\n                    value={language.code}\r\n                    placeholder=\"Language code\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button onClick={showProductDescriptionEditor(index)}>\r\n                    Edit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </>\r\n          );\r\n        })}\r\n      <hr />\r\n      <h1>PRICE</h1>\r\n      <TextInput\r\n        InputLabelProps={{ shrink: true }}\r\n        fullWidth\r\n        label=\"Price\"\r\n        value={product && product.price}\r\n        placeholder=\"PRICE\"\r\n        onChange={priceChangeHandler}\r\n      />\r\n      <Button onClick={saveNewPriceHandler}>Save price</Button>\r\n      <hr />\r\n      <h1>PURCHAISE PRICES</h1>\r\n      {product.product &&\r\n        product.purchaisePrices.map((price, index) => {\r\n          return <div>{price.unit_price}</div>;\r\n        })}\r\n      <h1>\r\n        IMAGES{\" \"}\r\n        <Button onClick={addNewProductImageHandler}>Add new image</Button>\r\n        <input type=\"file\" id=\"multi\" onChange={fileUpload} multiple />\r\n      </h1>\r\n      {images &&\r\n        images.map((image, index) => {\r\n          return (\r\n            <>\r\n              <Grid spacing={3} key={index}>\r\n                <Grid lg={6} item>\r\n                  <div>{image}</div>\r\n                  {image.edit ? (\r\n                    <Button onClick={saveImageHandler(index)}>Save</Button>\r\n                  ) : (\r\n                    <Button onClick={saveImageHandler(index)}>Save</Button>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </>\r\n          );\r\n        })}\r\n\r\n      <Button onClick={props.onDrawerCloseHandler}>Close this window</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditProductForm;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\SuggestionInput.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\SelectList.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\Form\\TextInput.js",["271"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     '& > *': {\r\n//       margin: theme.spacing(1),\r\n//       width: '25ch',\r\n//     },\r\n//   },\r\n// }));\r\n\r\n\r\nexport default function TextInput(props) {\r\n    return (\r\n        <TextField {...props} id=\"outlined-basic\"  label={props.label} variant=\"outlined\" />\r\n    )\r\n}\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\store\\middleware\\api.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\store\\PurchaseOrderReducer\\PurchaseOrderReducer.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\PurchaseOrder\\Test.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\store\\SellingOrderReducer\\SellingOrderReducer.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\AddProductToShipmentForm.js",["272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport axios from \"axios\";\r\nimport env from \"../../env\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { withStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport ProductByShipmentList from \"./ProductByShipmentList\";\r\n\r\nconst SignupSchema = Yup.object().shape({\r\n  codeBarOrProductId: Yup.string()\r\n    .min(2, \"Too Short!\")\r\n    .max(50, \"Too Long!\")\r\n    .required(\"Please enter a value \"),\r\n  value: Yup.number().required(\r\n    \"Please select if you want to search by product id and codebar\"\r\n  ),\r\n});\r\n\r\nconst AddProductToShipmentForm = (props) => {\r\n  console.log(props)\r\n  const {\r\n    values,\r\n    handleSubmit,\r\n    submitCount,\r\n    handleChange,\r\n    getFieldProps,\r\n    setValues,\r\n    touched,\r\n    errors,\r\n    setFieldValue,\r\n  } = useFormik({\r\n    initialValues: {\r\n      value: \"\",\r\n      codeBarOrProductId: \"\",\r\n    },\r\n    validationSchema: SignupSchema,\r\n\r\n    async onSubmit(values) {\r\n      let query = \"?selling-point=\" + props.sellingPoint;\r\n      if (values.value == 1) {\r\n        query = query + \"&code-bar=\" + values.codeBarOrProductId;\r\n      }\r\n      if (values.value == 2) {\r\n        query = query + \"&product-id=\" + values.codeBarOrProductId;\r\n      }\r\n      axios\r\n        .get(`${env()}product-stock/availability${query}`)\r\n        .then((response) => {\r\n          setStockinfoForProduct(response.data);\r\n        });\r\n    },\r\n  });\r\n\r\n  const [stockinfoForProduct, setStockinfoForProduct] = React.useState([]);\r\n  const [stockToAddToShipment, setStockToAddToShipment] = React.useState([]);\r\n\r\n  const handleCheckboxChange = (object) => (Event) => {\r\n    const stockinfoForProductCopy = [...stockinfoForProduct];\r\n    stockinfoForProductCopy[object.index].checked = !stockinfoForProductCopy[\r\n      object.index\r\n    ].checked;\r\n    const stockToAddToShipmentCopy = [...stockToAddToShipment];\r\n    if (stockinfoForProductCopy[object.index].checked) {\r\n      stockToAddToShipmentCopy.push(stockinfoForProductCopy[object.index]);\r\n      setStockToAddToShipment(stockToAddToShipmentCopy);\r\n    } else {\r\n      let arrayTemp = stockToAddToShipmentCopy.filter(\r\n        (stock, stockIndex) => stock.id != object.id\r\n      );\r\n      setStockToAddToShipment(arrayTemp);\r\n    }\r\n\r\n    setStockinfoForProduct(stockinfoForProductCopy);\r\n  };\r\n\r\n  const addProductToShipmentHandler = () => {\r\n    let answer;\r\n    answer = window.confirm(\r\n      \"Are you sure you want to add products to shipment?\"\r\n    );\r\n    if (!answer) {\r\n      return;\r\n    }\r\n    const stockToAddToShipmentCopy = [...stockToAddToShipment];\r\n    axios\r\n      .post(\r\n        env() + \"shipments/\" + props.shipment + \"/stock/add\",\r\n        stockToAddToShipmentCopy\r\n      )\r\n      .then((response) => {\r\n        setStockToAddToShipment([]);\r\n        handleSubmit();\r\n        props.onFormDataChange();\r\n      }).catch(error => {\r\n        alert(error.response.data.Explination)\r\n      })\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: \"2em\", minWidth: \"800px\" }}>\r\n      <Button onClick={props.onFormClose}>x</Button>\r\n      <h1>Shipment info Form</h1>\r\n      <form onSubmit={handleSubmit} noValidate>\r\n        <br />\r\n        <br />\r\n        <FormControl component=\"fieldset\">\r\n          <RadioGroup\r\n            row\r\n            aria-label=\"position\"\r\n            name=\"value\"\r\n            defaultValue=\"top\"\r\n            onChange={handleChange}\r\n            error={touched[\"value\"] && errors[\"value\"]}\r\n          >\r\n            <FormControlLabel\r\n              value=\"1\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"CodeBar\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"2\"\r\n              control={<Radio color=\"primary\" />}\r\n              label=\"Product Id\"\r\n            />\r\n          </RadioGroup>\r\n          <FormHelperText>{touched.value && errors.value}</FormHelperText>\r\n        </FormControl>\r\n        <br />\r\n        <br />\r\n        <TextField\r\n          id=\"codeBarOrProductId\"\r\n          name=\"codeBarOrProductId\"\r\n          label=\"codeBarOrProductId\"\r\n          variant=\"outlined\"\r\n          value={values.codeBarOrProductId}\r\n          onChange={handleChange}\r\n          error={touched[\"codeBarOrProductId\"] && errors[\"codeBarOrProductId\"]}\r\n          helperText={\r\n            touched[\"codeBarOrProductId\"] && errors[\"codeBarOrProductId\"]\r\n          }\r\n        />\r\n        <br /> <br />\r\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n          Search this product\r\n        </Button>\r\n      </form>\r\n      <br />\r\n      <hr />\r\n\r\n      {stockinfoForProduct &&\r\n        !!stockinfoForProduct.length &&\r\n        stockToAddToShipment &&\r\n        !!stockToAddToShipment.length && (\r\n          <div>\r\n            Product to add to shipment: {stockToAddToShipment.length}\r\n            <Button onClick={addProductToShipmentHandler}>\r\n              Add product to shipment\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n      {\r\n        //Show product stock info in shippment\r\n        stockinfoForProduct && !!stockinfoForProduct.length && (\r\n          <ProductByShipmentList\r\n            onProductCheck={handleCheckboxChange}\r\n            stockInfo={stockinfoForProduct}\r\n          />\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\nexport default AddProductToShipmentForm;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\TextEditor\\DraftTextEditor.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\TextEditor\\TextEditor.js",["294"],"import React, { useState, useRef } from \"react\";\r\nimport JoditEditor from \"jodit-react\";\r\n\r\nconst TextEditor = (props) => {\r\n  const editor = useRef(null);\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const config = {\r\n    readonly: false, // all options from https://xdsoft.net/jodit/doc/\r\n  };\r\n\r\n  return (\r\n    <JoditEditor\r\n      ref={editor}\r\n      value={props.content}\r\n      config={config}\r\n      tabIndex={1} // tabIndex of textarea\r\n      onBlur={(newContent) => setContent(newContent)} // preferred to use only this option to update the content for performance reasons\r\n      onChange={props.onTextChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TextEditor;\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\components\\Modal\\Modal.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\DashboardIndex\\Title.js",[],"D:\\react-projects\\ab_admin_dashboard\\src\\store\\api.jsx",[],"D:\\react-projects\\ab_admin_dashboard\\src\\components\\Shipment\\ProductByShipmentList.js",["295"],"import React from 'react'\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport { withStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  })\r\n)(TableCell);\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  poContainer: {\r\n    display: \"flex\",\r\n    height: \"100%\",\r\n  },\r\n  poCreationDate: {\r\n    height: \"100%\",\r\n    backgroundColor: \"#e24443\",\r\n    flexGrow: 1,\r\n    fontSize: \"50px\",\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    lineHeight: \"50px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n    flexDirection: \"column\",\r\n    fontFamily: \"'Spartan', sans-serif\",\r\n    width: \"90px\",\r\n    marginRight: \".5em\",\r\n  },\r\n  poId: {\r\n    fontSize: \"13px\",\r\n  },\r\n}));\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  })\r\n)(TableRow);\r\n\r\n\r\nconst ProductByShipmentList = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n    <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"right\">ID</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Product</StyledTableCell>\r\n              <StyledTableCell align=\"right\">SELLING POINT</StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                PRODUCT IN SHIPMENT\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">Shipment</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Shipment status</StyledTableCell>\r\n\r\n              <StyledTableCell align=\"right\">Action</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {props.stockInfo && props.stockInfo.length\r\n              ? props.stockInfo.map((stock, index) => (\r\n                  <StyledTableRow key={stock.ID}>\r\n                    <StyledTableCell align=\"right\">{stock.id}</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {stock.product}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {stock.selling_point}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {stock.productStockFoundInShipment ? \"Yes\" : \"no\"}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {stock.shipmentWhereTheProductStockIsFound\r\n                        ? stock.shipmentWhereTheProductStockIsFound\r\n                        : \"No shipment\"}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {stock.statsOfTheShipmentWhereProductStockIsFound\r\n                        ? stock.statsOfTheShipmentWhereProductStockIsFound\r\n                        : \"No shipment status\"}\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      {!stock.productStockFoundInShipment &&\r\n                        !stock.productStockFoundInShipment &&\r\n                        !stock.statsOfTheShipmentWhereProductStockIsFound && (\r\n                          <Checkbox\r\n                            defaultChecked\r\n                            checked={stock.checked ? true : false}\r\n                            onChange={props.onProductCheck({index, id:stock.id})}\r\n                            color=\"primary\"\r\n                            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                          />\r\n                        )}\r\n                    </StyledTableCell>\r\n                  </StyledTableRow>\r\n                ))\r\n              : null}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductByShipmentList\r\n","D:\\react-projects\\ab_admin_dashboard\\src\\views\\Login.js",["296"],"import { Helmet } from 'react-helmet';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { useEffect } from 'react';\r\n\r\n\r\n\r\nimport axios from 'axios';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  TextField,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport jwt from 'jwt-decode' // import dependency\r\n\r\n\r\n// import { Link as RouterLink } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n\r\n  // dispatch(logoutUser());\r\n  useEffect(() => {\r\n    // dispatch(logoutUser())\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Login | Material Kit</title>\r\n      </Helmet>\r\n      <Box\r\n        sx={{\r\n          backgroundColor: 'background.default',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          height: '100%',\r\n          justifyContent: 'center'\r\n        }}\r\n      >\r\n\r\n        <Container maxWidth=\"sm\">\r\n          <Formik\r\n            initialValues={{\r\n              email: 'demo@devias.io',\r\n              password: 'Password123'\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              email: Yup.string()\r\n                .email('Must be a valid email')\r\n                .max(255)\r\n                .required('Email is required'),\r\n              password: Yup.string().max(255).required('Password is required')\r\n            })}\r\n            onSubmit={(userInfo, { setSubmitting }) => {\r\n              axios\r\n                .post('ab/token', {\r\n                  email: userInfo.email,\r\n                  password: userInfo.password,\r\n                  grantType: 'token'\r\n                })\r\n                .then((response) => {\r\n                //   const user = jwt(response.data.token);\r\n                //   dispatch(addUser(user.data));\r\n                //   navigate('/dashboard', { replace: true });\r\n                }).catch(error => {\r\n                  console.log(error)\r\n                })\r\n              setSubmitting(false);\r\n            }}\r\n          >\r\n            {({\r\n              errors,\r\n              handleBlur,\r\n              handleChange,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              touched,\r\n              values\r\n            }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <Box sx={{ mb: 3 }}>\r\n                  <Typography color=\"textPrimary\" variant=\"h2\">\r\n                    Sign in\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <TextField\r\n                  error={Boolean(touched.email && errors.email)}\r\n                  fullWidth\r\n                  helperText={touched.email && errors.email}\r\n                  label=\"Email Address\"\r\n                  margin=\"normal\"\r\n                  name=\"email\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.password && errors.password)}\r\n                  fullWidth\r\n                  helperText={touched.password && errors.password}\r\n                  label=\"Password\"\r\n                  margin=\"normal\"\r\n                  name=\"password\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  variant=\"outlined\"\r\n                />\r\n                <Box sx={{ py: 2 }}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    disabled={isSubmitting}\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    Sign in now\r\n                  </Button>\r\n                </Box>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Container>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n",{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","severity":1,"message":"302","line":3,"column":8,"nodeType":"303","messageId":"304","endLine":3,"endColumn":14},{"ruleId":"305","severity":1,"message":"306","line":3,"column":30,"nodeType":"307","messageId":"308","endLine":3,"endColumn":32},{"ruleId":"305","severity":1,"message":"306","line":7,"column":30,"nodeType":"307","messageId":"308","endLine":7,"endColumn":32},{"ruleId":"301","severity":1,"message":"309","line":24,"column":8,"nodeType":"303","messageId":"304","endLine":24,"endColumn":24},{"ruleId":"301","severity":1,"message":"310","line":8,"column":8,"nodeType":"303","messageId":"304","endLine":8,"endColumn":24},{"ruleId":"301","severity":1,"message":"311","line":7,"column":8,"nodeType":"303","messageId":"304","endLine":7,"endColumn":11},{"ruleId":"301","severity":1,"message":"310","line":8,"column":8,"nodeType":"303","messageId":"304","endLine":8,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":5,"column":1,"nodeType":"314","endLine":13,"endColumn":2},{"ruleId":"301","severity":1,"message":"315","line":8,"column":8,"nodeType":"303","messageId":"304","endLine":8,"endColumn":16},{"ruleId":"301","severity":1,"message":"316","line":13,"column":22,"nodeType":"303","messageId":"304","endLine":13,"endColumn":33},{"ruleId":"301","severity":1,"message":"317","line":59,"column":10,"nodeType":"303","messageId":"304","endLine":59,"endColumn":14},{"ruleId":"301","severity":1,"message":"318","line":60,"column":10,"nodeType":"303","messageId":"304","endLine":60,"endColumn":22},{"ruleId":"301","severity":1,"message":"319","line":60,"column":24,"nodeType":"303","messageId":"304","endLine":60,"endColumn":39},{"ruleId":"301","severity":1,"message":"320","line":100,"column":9,"nodeType":"303","messageId":"304","endLine":100,"endColumn":19},{"ruleId":"301","severity":1,"message":"321","line":200,"column":9,"nodeType":"303","messageId":"304","endLine":200,"endColumn":20},{"ruleId":"301","severity":1,"message":"322","line":231,"column":9,"nodeType":"303","messageId":"304","endLine":231,"endColumn":20},{"ruleId":"301","severity":1,"message":"323","line":266,"column":9,"nodeType":"303","messageId":"304","endLine":266,"endColumn":16},{"ruleId":"301","severity":1,"message":"324","line":268,"column":9,"nodeType":"303","messageId":"304","endLine":268,"endColumn":23},{"ruleId":"325","severity":1,"message":"326","line":287,"column":13,"nodeType":"327","endLine":287,"endColumn":29},{"ruleId":"325","severity":1,"message":"326","line":511,"column":21,"nodeType":"327","endLine":511,"endColumn":36},{"ruleId":"328","severity":1,"message":"329","line":32,"column":6,"nodeType":"330","endLine":32,"endColumn":8,"suggestions":"331"},{"ruleId":"332","severity":1,"message":"333","line":48,"column":11,"nodeType":"334","endLine":48,"endColumn":56},{"ruleId":"301","severity":1,"message":"335","line":3,"column":3,"nodeType":"303","messageId":"304","endLine":3,"endColumn":20},{"ruleId":"301","severity":1,"message":"336","line":4,"column":3,"nodeType":"303","messageId":"304","endLine":4,"endColumn":21},{"ruleId":"301","severity":1,"message":"337","line":6,"column":8,"nodeType":"303","messageId":"304","endLine":6,"endColumn":14},{"ruleId":"301","severity":1,"message":"338","line":9,"column":10,"nodeType":"303","messageId":"304","endLine":9,"endColumn":21},{"ruleId":"301","severity":1,"message":"339","line":9,"column":23,"nodeType":"303","messageId":"304","endLine":9,"endColumn":34},{"ruleId":"301","severity":1,"message":"340","line":19,"column":8,"nodeType":"303","messageId":"304","endLine":19,"endColumn":23},{"ruleId":"301","severity":1,"message":"311","line":21,"column":8,"nodeType":"303","messageId":"304","endLine":21,"endColumn":11},{"ruleId":"301","severity":1,"message":"341","line":12,"column":8,"nodeType":"303","messageId":"304","endLine":12,"endColumn":12},{"ruleId":"325","severity":1,"message":"326","line":34,"column":113,"nodeType":"327","endLine":34,"endColumn":137},{"ruleId":"301","severity":1,"message":"342","line":7,"column":8,"nodeType":"303","messageId":"304","endLine":7,"endColumn":14},{"ruleId":"328","severity":1,"message":"343","line":19,"column":6,"nodeType":"330","endLine":19,"endColumn":8,"suggestions":"344"},{"ruleId":"301","severity":1,"message":"345","line":3,"column":3,"nodeType":"303","messageId":"304","endLine":3,"endColumn":19},{"ruleId":"301","severity":1,"message":"346","line":4,"column":3,"nodeType":"303","messageId":"304","endLine":4,"endColumn":20},{"ruleId":"301","severity":1,"message":"338","line":6,"column":10,"nodeType":"303","messageId":"304","endLine":6,"endColumn":21},{"ruleId":"301","severity":1,"message":"339","line":6,"column":23,"nodeType":"303","messageId":"304","endLine":6,"endColumn":34},{"ruleId":"301","severity":1,"message":"347","line":14,"column":10,"nodeType":"303","messageId":"304","endLine":14,"endColumn":14},{"ruleId":"348","severity":1,"message":"349","line":87,"column":110,"nodeType":"307","messageId":"350","endLine":87,"endColumn":111},{"ruleId":"351","severity":1,"message":"352","line":90,"column":17,"nodeType":"334","endLine":90,"endColumn":83},{"ruleId":"328","severity":1,"message":"353","line":78,"column":6,"nodeType":"330","endLine":78,"endColumn":24,"suggestions":"354"},{"ruleId":"305","severity":1,"message":"306","line":194,"column":78,"nodeType":"307","messageId":"308","endLine":194,"endColumn":80},{"ruleId":"305","severity":1,"message":"306","line":194,"column":119,"nodeType":"307","messageId":"308","endLine":194,"endColumn":121},{"ruleId":"305","severity":1,"message":"306","line":204,"column":78,"nodeType":"307","messageId":"308","endLine":204,"endColumn":80},{"ruleId":"305","severity":1,"message":"306","line":204,"column":119,"nodeType":"307","messageId":"308","endLine":204,"endColumn":121},{"ruleId":"305","severity":1,"message":"306","line":214,"column":78,"nodeType":"307","messageId":"308","endLine":214,"endColumn":80},{"ruleId":"305","severity":1,"message":"306","line":214,"column":119,"nodeType":"307","messageId":"308","endLine":214,"endColumn":121},{"ruleId":"301","severity":1,"message":"335","line":3,"column":3,"nodeType":"303","messageId":"304","endLine":3,"endColumn":20},{"ruleId":"301","severity":1,"message":"336","line":4,"column":3,"nodeType":"303","messageId":"304","endLine":4,"endColumn":21},{"ruleId":"301","severity":1,"message":"337","line":6,"column":8,"nodeType":"303","messageId":"304","endLine":6,"endColumn":14},{"ruleId":"301","severity":1,"message":"338","line":9,"column":10,"nodeType":"303","messageId":"304","endLine":9,"endColumn":21},{"ruleId":"301","severity":1,"message":"339","line":9,"column":23,"nodeType":"303","messageId":"304","endLine":9,"endColumn":34},{"ruleId":"301","severity":1,"message":"340","line":19,"column":8,"nodeType":"303","messageId":"304","endLine":19,"endColumn":23},{"ruleId":"301","severity":1,"message":"335","line":3,"column":3,"nodeType":"303","messageId":"304","endLine":3,"endColumn":20},{"ruleId":"301","severity":1,"message":"336","line":4,"column":3,"nodeType":"303","messageId":"304","endLine":4,"endColumn":21},{"ruleId":"301","severity":1,"message":"337","line":6,"column":8,"nodeType":"303","messageId":"304","endLine":6,"endColumn":14},{"ruleId":"301","severity":1,"message":"338","line":9,"column":10,"nodeType":"303","messageId":"304","endLine":9,"endColumn":21},{"ruleId":"301","severity":1,"message":"339","line":9,"column":23,"nodeType":"303","messageId":"304","endLine":9,"endColumn":34},{"ruleId":"301","severity":1,"message":"340","line":19,"column":8,"nodeType":"303","messageId":"304","endLine":19,"endColumn":23},{"ruleId":"301","severity":1,"message":"355","line":5,"column":10,"nodeType":"303","messageId":"304","endLine":5,"endColumn":21},{"ruleId":"301","severity":1,"message":"356","line":5,"column":23,"nodeType":"303","messageId":"304","endLine":5,"endColumn":37},{"ruleId":"301","severity":1,"message":"357","line":8,"column":8,"nodeType":"303","messageId":"304","endLine":8,"endColumn":18},{"ruleId":"301","severity":1,"message":"358","line":12,"column":18,"nodeType":"303","messageId":"304","endLine":12,"endColumn":27},{"ruleId":"328","severity":1,"message":"359","line":32,"column":6,"nodeType":"330","endLine":32,"endColumn":23,"suggestions":"360"},{"ruleId":"301","severity":1,"message":"361","line":110,"column":9,"nodeType":"303","messageId":"304","endLine":110,"endColumn":28},{"ruleId":"301","severity":1,"message":"362","line":2,"column":10,"nodeType":"303","messageId":"304","endLine":2,"endColumn":20},{"ruleId":"301","severity":1,"message":"363","line":2,"column":8,"nodeType":"303","messageId":"304","endLine":2,"endColumn":16},{"ruleId":"301","severity":1,"message":"364","line":11,"column":8,"nodeType":"303","messageId":"304","endLine":11,"endColumn":17},{"ruleId":"301","severity":1,"message":"362","line":15,"column":10,"nodeType":"303","messageId":"304","endLine":15,"endColumn":20},{"ruleId":"301","severity":1,"message":"365","line":16,"column":8,"nodeType":"303","messageId":"304","endLine":16,"endColumn":13},{"ruleId":"301","severity":1,"message":"315","line":17,"column":8,"nodeType":"303","messageId":"304","endLine":17,"endColumn":16},{"ruleId":"301","severity":1,"message":"366","line":18,"column":8,"nodeType":"303","messageId":"304","endLine":18,"endColumn":13},{"ruleId":"301","severity":1,"message":"367","line":19,"column":8,"nodeType":"303","messageId":"304","endLine":19,"endColumn":17},{"ruleId":"301","severity":1,"message":"368","line":20,"column":8,"nodeType":"303","messageId":"304","endLine":20,"endColumn":17},{"ruleId":"301","severity":1,"message":"369","line":21,"column":8,"nodeType":"303","messageId":"304","endLine":21,"endColumn":22},{"ruleId":"301","severity":1,"message":"370","line":22,"column":8,"nodeType":"303","messageId":"304","endLine":22,"endColumn":17},{"ruleId":"301","severity":1,"message":"340","line":23,"column":8,"nodeType":"303","messageId":"304","endLine":23,"endColumn":23},{"ruleId":"301","severity":1,"message":"371","line":24,"column":8,"nodeType":"303","messageId":"304","endLine":24,"endColumn":16},{"ruleId":"301","severity":1,"message":"372","line":25,"column":10,"nodeType":"303","messageId":"304","endLine":25,"endColumn":20},{"ruleId":"301","severity":1,"message":"373","line":25,"column":22,"nodeType":"303","messageId":"304","endLine":25,"endColumn":27},{"ruleId":"301","severity":1,"message":"374","line":25,"column":29,"nodeType":"303","messageId":"304","endLine":25,"endColumn":41},{"ruleId":"301","severity":1,"message":"375","line":43,"column":5,"nodeType":"303","messageId":"304","endLine":43,"endColumn":16},{"ruleId":"301","severity":1,"message":"376","line":45,"column":5,"nodeType":"303","messageId":"304","endLine":45,"endColumn":18},{"ruleId":"301","severity":1,"message":"377","line":46,"column":5,"nodeType":"303","messageId":"304","endLine":46,"endColumn":14},{"ruleId":"301","severity":1,"message":"378","line":49,"column":5,"nodeType":"303","messageId":"304","endLine":49,"endColumn":18},{"ruleId":"305","severity":1,"message":"306","line":59,"column":24,"nodeType":"307","messageId":"308","endLine":59,"endColumn":26},{"ruleId":"305","severity":1,"message":"306","line":62,"column":24,"nodeType":"307","messageId":"308","endLine":62,"endColumn":26},{"ruleId":"305","severity":1,"message":"379","line":87,"column":41,"nodeType":"307","messageId":"308","endLine":87,"endColumn":43},{"ruleId":"301","severity":1,"message":"380","line":6,"column":10,"nodeType":"303","messageId":"304","endLine":6,"endColumn":17},{"ruleId":"301","severity":1,"message":"340","line":9,"column":8,"nodeType":"303","messageId":"304","endLine":9,"endColumn":23},{"ruleId":"301","severity":1,"message":"381","line":16,"column":8,"nodeType":"303","messageId":"304","endLine":16,"endColumn":11},"no-native-reassign",["382"],"no-negated-in-lhs",["383"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'SellingOrderForm' is defined but never used.","'CircularProgress' is defined but never used.","'env' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Checkbox' is defined but never used.","'bindTrigger' is defined but never used.","'open' is assigned a value but never used.","'checkedLines' is assigned a value but never used.","'setCheckedLines' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'onLineCheck' is assigned a value but never used.","'classes' is assigned a value but never used.","'speedDialStyle' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array.","ArrayExpression",["384"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getPurchaseOrders' is defined but never used.","'loadPurchaseOrders' is defined but never used.","'moment' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'TablePagination' is defined but never used.","'Test' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["385"],"'getSellingOrders' is defined but never used.","'loadSellingOrders' is defined but never used.","'Link' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","React Hook React.useEffect has a missing dependency: 'getshipmentDetails'. Either include it or remove the dependency array.",["386"],"'closeDrawer' is assigned a value but never used.","'setcloseDrawer' is assigned a value but never used.","'TextEditor' is defined but never used.","'setImages' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getProductDetails'. Either include it or remove the dependency array.",["387"],"'imagesChangeHandler' is assigned a value but never used.","'makeStyles' is defined but never used.","'ReactDOM' is defined but never used.","'FormLabel' is defined but never used.","'Paper' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'withStyles' is defined but never used.","'Theme' is defined but never used.","'createStyles' is defined but never used.","'submitCount' is assigned a value but never used.","'getFieldProps' is assigned a value but never used.","'setValues' is assigned a value but never used.","'setFieldValue' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'content' is assigned a value but never used.","'jwt' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},"Update the dependencies array to be: [props.id]",{"range":"396","text":"397"},"Update the dependencies array to be: [id]",{"range":"398","text":"399"},"Update the dependencies array to be: [getshipmentDetails, props.shipmentId]",{"range":"400","text":"401"},"Update the dependencies array to be: [getProductDetails, props.productId]",{"range":"402","text":"403"},[1155,1157],"[props.id]",[644,646],"[id]",[2166,2184],"[getshipmentDetails, props.shipmentId]",[1036,1053],"[getProductDetails, props.productId]"]